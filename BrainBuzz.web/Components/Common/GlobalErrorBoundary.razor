@using Microsoft.Extensions.Logging
@inject ILogger<GlobalErrorBoundary> Logger
@inject NavigationManager Navigation

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@if (hasError)
{
    <div class="error-boundary">
        <div class="error-boundary-content">
            <div class="error-icon">⚠️</div>
            <h2 class="error-title">Something went wrong</h2>
            <p class="error-message">An unexpected error occurred. Please try refreshing the page.</p>

            @if (ShowDetails && !string.IsNullOrEmpty(errorMessage))
            {
                <details class="error-details">
                    <summary>Error Details</summary>
                    <pre class="error-stack">@errorMessage</pre>
                </details>
            }
            
            <div class="error-actions">
                <button class="error-btn error-btn-primary" @onclick="RefreshPage">
                    <i class="fas fa-refresh"></i> Refresh Page
                </button>
                <button class="error-btn error-btn-outline" @onclick="GoHome">
                    <i class="fas fa-home"></i> Go Home
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool ShowDetails { get; set; } = false;
    
    private bool hasError = false;
    private string errorMessage = string.Empty;

    public void HandleException(Exception exception)
    {
        hasError = true;
        errorMessage = exception.ToString();
        
        Logger.LogError(exception, "Unhandled exception in component");
        StateHasChanged();
    }

    private void RefreshPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    public void Reset()
    {
        hasError = false;
        errorMessage = string.Empty;
        StateHasChanged();
    }
}
