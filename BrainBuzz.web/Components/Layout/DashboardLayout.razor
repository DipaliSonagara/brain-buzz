@using BrainBuzz.web.Components.Common
@using BrainBuzz.web.Services
@using BrainBuzz.web.Constants
@using BrainBuzz.web.Services.Interface
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<!-- Global Loading Overlay -->
<GlobalLoader />

@if (isLoading)
{
    <div class="auth-layout">
        <div class="auth-card">
            <div class="auth-body">
                <div class="flex justify-center">
                    <div class="loading-spinner"></div>
                </div>
                <p class="text-center text-gray-600 mt-4">@LoadingMessage</p>
                <p class="text-center text-red-600 mt-2">DEBUG: DashboardLayout is loading...</p>
                <p class="text-center text-blue-600 mt-2">Component should render and call OnAfterRenderAsync</p>
                <script>
                    console.log("DashboardLayout: Component markup is rendering!");
                    console.log("DashboardLayout: About to trigger OnAfterRenderAsync");
                </script>
            </div>
        </div>
    </div>
}
else if (!isAuthenticated)
{
    <div class="auth-layout">
        <div class="auth-card">
            <div class="auth-body">
                <div class="flex justify-center">
                    <div class="loading-spinner"></div>
                </div>
                <p class="text-center text-gray-600 mt-4">Redirecting to login...</p>
            </div>
        </div>
    </div>
}
else if (isAuthenticated)
{
    <div class="dashboard-layout">
        <!-- Mobile Menu Toggle -->
        <button class="mobile-menu-toggle" @onclick="ToggleMobileMenu">
            <i class="fas fa-bars"></i>
        </button>
        
        <!-- Mobile Overlay -->
        @if (isMobileMenuOpen)
        {
            <div class="mobile-overlay" @onclick="ToggleMobileMenu"></div>
        }
        
        <!-- Sidebar -->
        <aside class="sidebar @(isMobileMenuOpen ? "open" : "")">
            <div class="sidebar-header">
                <a href="/overview" class="sidebar-logo">
                    <img src="/logo/brain-buzz-logo.png" alt="BrainBuzz" />
                    <span class="sidebar-logo-text">BrainBuzz</span>
                </a>
            </div>
            
            <nav class="sidebar-nav">
                <div class="sidebar-nav-item">
                    <a href="/overview" class="sidebar-nav-link @(IsActiveRoute("/overview") ? "active" : "")">
                        <i class="fas fa-home"></i>
                        <span>Overview</span>
                    </a>
                </div>
                <div class="sidebar-nav-item">
                    <a href="/quizzes" class="sidebar-nav-link @(IsActiveRoute("/quizzes") ? "active" : "")">
                        <i class="fas fa-question-circle"></i>
                        <span>Quizzes</span>
                    </a>
                </div>
                <div class="sidebar-nav-item">
                    <a href="/results" class="sidebar-nav-link @(IsActiveRoute("/results") ? "active" : "")">
                        <i class="fas fa-chart-bar"></i>
                        <span>Results</span>
                    </a>
                </div>
                <div class="sidebar-nav-item">
                    <a href="/profile" class="sidebar-nav-link @(IsActiveRoute("/profile") ? "active" : "")">
                        <i class="fas fa-user"></i>
                        <span>Profile</span>
                    </a>
                </div>
            </nav>
            
            <div class="sidebar-footer">
                <div class="flex items-center gap-3 mb-4">
                    <div class="w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center">
                        <span class="text-white font-semibold text-sm">@(string.IsNullOrEmpty(currentUser) ? "U" : currentUser.Substring(0, 1).ToUpper())</span>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-900">@currentUser</p>
                        <p class="text-xs text-gray-500">Online</p>
                    </div>
                </div>
                <button class="btn btn-outline w-full" @onclick="Logout">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </button>
            </div>
        </aside>
        
        <!-- Main Content -->
        <main class="main-content">
            <header class="main-header">
                <div class="main-header-content">
                    <h1 class="main-header-title">@PageTitle</h1>
                    <div class="main-header-actions">
                        <div class="flex items-center gap-3">
                            <div class="w-8 h-8 bg-gradient-primary rounded-full flex items-center justify-center">
                                <span class="text-white font-semibold text-sm">@(currentUser?.Substring(0, 1).ToUpper() ?? "U")</span>
                            </div>
                            <span class="text-sm text-gray-600">Welcome, @currentUser!</span>
                        </div>
                    </div>
                </div>
            </header>
            
            <div class="main-body">
                @if (ChildContentWithUser != null)
                {
                    @ChildContentWithUser(currentUser)
                }
                else if (ChildContent != null)
                {
                    @ChildContent
                }
            </div>
        </main>
    </div>
}
else
{
    <!-- Redirect to access denied -->
    <div style="display: none;"></div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment<string>? ChildContentWithUser { get; set; }
    [Parameter] public string PageTitle { get; set; } = "Dashboard";
    [Parameter] public string LoadingMessage { get; set; } = AppConstants.UIText.LoadingDashboard;
    
    private string currentUser = "";
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private bool isMobileMenuOpen = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize without JavaScript interop calls
        Console.WriteLine("DashboardLayout: Initializing...");
        Console.WriteLine("DashboardLayout: Component is being initialized!");
        isLoading = true;
        StateHasChanged();
        
        // Force a render to ensure the component renders
        await InvokeAsync(StateHasChanged);
        Console.WriteLine("DashboardLayout: Forced render completed");
        
        // Test: Try to trigger OnAfterRenderAsync manually
        Console.WriteLine("DashboardLayout: Attempting to trigger OnAfterRenderAsync manually...");
        await InvokeAsync(() => {
            Console.WriteLine("DashboardLayout: Manual render trigger completed");
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"DashboardLayout: OnAfterRenderAsync called - firstRender: {firstRender}");
        if (firstRender)
        {
            try
            {
                Console.WriteLine("DashboardLayout: Starting authentication check after render...");
                Console.WriteLine($"DashboardLayout: Current URL: {Navigation.Uri}");
                
                // Add a small delay to ensure any previous navigation has completed
                await Task.Delay(100);
                
                // Test JavaScript interop first
                Console.WriteLine("DashboardLayout: Testing JavaScript interop...");
                var testValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "sessionId");
                Console.WriteLine($"DashboardLayout: JavaScript interop test - sessionId from localStorage: '{testValue}'");
                
                Console.WriteLine("DashboardLayout: About to call CheckAuthenticationAsync...");
                var authResult = await AuthService.CheckAuthenticationAsync();
                Console.WriteLine($"DashboardLayout: Auth result - IsAuthenticated: {authResult.IsAuthenticated}, Username: {authResult.Username}");
                
                isAuthenticated = authResult.IsAuthenticated;
                currentUser = authResult.Username;
                
                if (!isAuthenticated)
                {
                    Console.WriteLine("DashboardLayout: Not authenticated, redirecting to login");
                    isLoading = false;
                    StateHasChanged();
                    await Task.Delay(100); // Small delay before navigation
                    Navigation.NavigateTo("/login", forceLoad: true);
                    return;
                }
                
                Console.WriteLine("DashboardLayout: User is authenticated, showing dashboard");
                isLoading = false;
                Console.WriteLine("DashboardLayout: Authentication check complete, isLoading = false");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"DashboardLayout: Error during authentication: {ex.Message}");
                Console.WriteLine($"DashboardLayout: Stack trace: {ex.StackTrace}");
                
                // Handle any errors gracefully - redirect to login
                Console.WriteLine("DashboardLayout: Authentication error, redirecting to login");
                isLoading = false;
                StateHasChanged();
                await Task.Delay(100); // Small delay before navigation
                Navigation.NavigateTo("/login", forceLoad: true);
            }
        }
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
        StateHasChanged();
    }

    private bool IsActiveRoute(string route)
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        return currentPath.StartsWith(route.TrimStart('/'));
    }

    private async Task Logout()
    {
        try
        {
            // Use the proper authentication service to logout
            await AuthService.LogoutAsync();
            
            // Navigate to home page
            Navigation.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            // Log error and still navigate to home
            Console.WriteLine($"Logout error: {ex.Message}");
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }
}
