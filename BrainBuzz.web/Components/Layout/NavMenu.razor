@using BrainBuzz.web.Services
@inject SessionService SessionService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="sidebar @(IsMobileMenuOpen ? "open" : "")">
     <div class="position-sticky pt-3">
          <div class="sidebar-logo mb-4">
               <a href="/overview" class="logo-link">
                    <img src="/logo/brain-buzz-logo.png" alt="BrainBuzz" class="logo-image" />
                    <span class="logo-text">BrainBuzz</span>
               </a>
          </div>

          @if (IsUserLoggedIn)

          {
               <div class="user-info mb-3 p-2 bg-light rounded">
                    <small class="text-muted">Welcome, @CurrentUsername!</small>
               </div>
          }

          <ul class="nav flex-column">
               <li class="nav-item">
                    <NavLink class="nav-link" href="/overview">
                         <i class="fas fa-home"></i> Overview
                    </NavLink>
               </li>
               <li class="nav-item">
                    <NavLink class="nav-link" href="/quizzes">
                         <i class="fas fa-question-circle"></i> Quizzes
                    </NavLink>
               </li>
               <li class="nav-item">
                    <NavLink class="nav-link" href="/results">
                         <i class="fas fa-chart-bar"></i> Results
                    </NavLink>
               </li>
               <li class="nav-item">
                    <NavLink class="nav-link" href="/profile">
                         <i class="fas fa-user"></i> Profile
                    </NavLink>
               </li>

               @if (IsUserLoggedIn)
               {
                    <li class="nav-item mt-3">
                         <button class="nav-link btn btn-link text-danger" @onclick="Logout">
                              <i class="fas fa-sign-out-alt"></i> Logout
                         </button>
                    </li>
               }
          </ul>
     </div>
</div>

@code {
     [Parameter] public bool IsMobileMenuOpen { get; set; } = false;

     [Parameter] public EventCallback OnMobileMenuToggle { get; set; }


     private bool IsUserLoggedIn = false;

     private string CurrentUsername = string.Empty;

     private string SessionId = string.Empty;



     protected override async Task OnAfterRenderAsync(bool firstRender)

     {

          if (firstRender)

          {

               await CheckAuthenticationStatus();

          }

     }



     private async Task CheckAuthenticationStatus()

     {

          try

          {

               SessionId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "sessionId") ?? string.Empty;

               CurrentUsername = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username") ?? string.Empty;


               if (!string.IsNullOrEmpty(SessionId) && !string.IsNullOrEmpty(CurrentUsername))

               {

                    IsUserLoggedIn = SessionService.IsUserLoggedIn(SessionId);

               }

               else

               {

                    IsUserLoggedIn = false;

               }

          }

          catch

          {

               IsUserLoggedIn = false;

          }

     }



     private async Task Logout()

     {

          // Clear session

          if (!string.IsNullOrEmpty(SessionId))

          {

               SessionService.RemoveSession(SessionId);

          }


          // Clear browser storage

          await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "sessionId");

          await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");


          // Update component state

          IsUserLoggedIn = false;

          CurrentUsername = string.Empty;

          SessionId = string.Empty;


          // Navigate to home

          Navigation.NavigateTo("/");

          StateHasChanged();

     }
}