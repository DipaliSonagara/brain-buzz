@page "/admin/dashboard"
@using BrainBuzz.web.Constants
@using BrainBuzz.web.Services.Interface
@using BrainBuzz.web.Attributes
@using BrainBuzz.web.Components.Common
@using Microsoft.AspNetCore.Identity
@inject IQuizService QuizService
@inject UserManager<IdentityUser> UserManager
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@layout AdminLayout

<div class="admin-page-header">
    <h1 class="admin-page-title">Dashboard</h1>
    <p class="admin-page-subtitle">Welcome to BrainBuzz Admin Panel</p>
</div>

@if (isLoading)
{
     <LoadingSkeleton Type="LoadingSkeleton.SkeletonType.Card" />
}
else
{
    <!-- Statistics Cards -->
    <div class="admin-stats-grid">
        <div class="admin-stat-card" @onclick="() => NavigateToUsers()">
            <div class="admin-stat-icon primary">
                <i class="fas fa-users"></i>
            </div>
            <div class="admin-stat-content">
                <div class="admin-stat-label">Total Users</div>
                <h2 class="admin-stat-value">@totalUsers</h2>
            </div>
        </div>

        <div class="admin-stat-card" @onclick="() => NavigateToQuizzes()">
            <div class="admin-stat-icon success">
                <i class="fas fa-question-circle"></i>
            </div>
            <div class="admin-stat-content">
                <div class="admin-stat-label">Total Quizzes</div>
                <h2 class="admin-stat-value">@totalQuizzes</h2>
            </div>
        </div>

        <div class="admin-stat-card" @onclick="() => NavigateToQuizzes(true)">
            <div class="admin-stat-icon info">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="admin-stat-content">
                <div class="admin-stat-label">Active Quizzes</div>
                <h2 class="admin-stat-value">@activeQuizzes</h2>
            </div>
        </div>

        <div class="admin-stat-card" @onclick="() => NavigateToQuizzes(false)">
            <div class="admin-stat-icon warning">
                <i class="fas fa-times-circle"></i>
            </div>
            <div class="admin-stat-content">
                <div class="admin-stat-label">Inactive Quizzes</div>
                <h2 class="admin-stat-value">@inactiveQuizzes</h2>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="admin-card">
        <div class="admin-card-header">
            <h2 class="admin-card-title">Quick Actions</h2>
        </div>
        <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
            <button class="admin-action-btn primary" @onclick="() => Navigation.NavigateTo(AppRoutes.AdminQuizzesNew)">
                <i class="fas fa-plus"></i>
                Create Quiz
            </button>
            <button class="admin-action-btn primary" @onclick="() => Navigation.NavigateTo(AppRoutes.AdminCategoriesNew)">
                <i class="fas fa-folder-plus"></i>
                Create Category
            </button>
            <button class="admin-action-btn secondary" @onclick="() => Navigation.NavigateTo(AppRoutes.AdminUsers)">
                <i class="fas fa-users-cog"></i>
                Manage Users
            </button>
            <button class="admin-action-btn secondary" @onclick="() => Navigation.NavigateTo(AppRoutes.AdminSettings)">
                <i class="fas fa-cog"></i>
                Settings
            </button>
        </div>
    </div>

    <!-- Recent Activity (Placeholder) -->
    <div class="admin-card">
        <div class="admin-card-header">
            <h2 class="admin-card-title">Recent Activity</h2>
        </div>
        <div style="text-align: center; padding: 3rem; color: #64748b;">
            <i class="fas fa-clock" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.3;"></i>
            <p>Activity feed will be implemented in Phase 2</p>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private int totalUsers = 0;
    private int totalQuizzes = 0;
    private int activeQuizzes = 0;
    private int inactiveQuizzes = 0;

    protected override async Task OnInitializedAsync()
    {
        // Don't do anything during prerendering
        isLoading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDashboardDataAsync();
        }
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // Add delay to show skeleton
            await Task.Delay(500);
            
            // Load statistics
            var quizzes = await QuizService.GetAllQuizzesAsync();
            totalQuizzes = quizzes.Count;
            activeQuizzes = quizzes.Count(q => q.IsActive);
            inactiveQuizzes = quizzes.Count(q => !q.IsActive);
            
            // Get total users count
            totalUsers = UserManager.Users.Count();
            
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log error
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToUsers()
    {
        Navigation.NavigateTo("/admin/users");
    }

    private void NavigateToQuizzes(bool? activeFilter = null)
    {
        if (activeFilter.HasValue)
        {
            Navigation.NavigateTo($"/admin/quizzes?active={activeFilter.Value}");
        }
        else
        {
            Navigation.NavigateTo("/admin/quizzes");
        }
    }
}

