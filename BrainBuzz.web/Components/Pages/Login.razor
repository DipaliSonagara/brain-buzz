@page "/"
@layout BlankLayout
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using BrainBuzz.web.Components.Layout
@using BrainBuzz.web.Models.Request
@using BrainBuzz.web.Services
@using Microsoft.AspNetCore.Identity.Data

<div class="auth-container">
     <div class="auth-card">
          <div class="auth-header">
               <div class="auth-icon">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
               </div>
               <h1 class="auth-title">Welcome Back</h1>
               <p class="auth-subtitle">
                    Don't have an account? <a href="/register">Sign up here</a>
               </p>
          </div>

          <EditForm Model="@loginModel" OnValidSubmit="@LoginProcess">
               <DataAnnotationsValidator />

               <div class="form-group">
                    <label for="username">Username</label>
                    <InputText @bind-Value="loginModel.Username" id="username" type="username"
                               class="form-input" placeholder="Enter your username" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
               </div>

               <div class="form-group">
                    <label for="password">Password</label>
                    <InputText @bind-Value="loginModel.Password" id="password" type="password"
                               class="form-input" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
               </div>

               <div class="form-actions">
                    <div class="checkbox-group">
                         <InputCheckbox @bind-Value="loginModel.RememberMe" id="remember-me" class="checkbox-input" />
                         <label for="remember-me" class="checkbox-label">Remember me</label>
                    </div>
                    <a href="/forgot-password" class="forgot-link">Forgot password?</a>
               </div>

               <ValidationSummary class="validation-summary" />

               <button type="submit" disabled="@isLoading" class="btn btn-primary">
                    @if (isLoading)
                    {
                         <div class="spinner"></div>
                    }
                    Sign In
               </button>
          </EditForm>
     </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

    private async Task LoginProcess()
    {
       
     {
          isLoading = true;
          try
          {
                   
                   
               Console.WriteLine($"Login attempt: {loginModel.Username}");

               var loginRequest = new LoginRequest
                  {
                       Username = loginModel.Username,
                       Password = loginModel.Password
                  };

               bool isSuccess = await UserService.LoginUser(loginRequest);

                 if (isSuccess)
                    {
                       Console.WriteLine("Login successful!");
                      
                    }
                 else
                    {
                       Console.WriteLine("Invalid username or password.");
                    }
                    }
                    catch (Exception ex)
                    {
                         Console.WriteLine($"Login error: {ex.Message}");
                    }
                    finally
                    {
                         isLoading = false;
                    }
     }

     }
}