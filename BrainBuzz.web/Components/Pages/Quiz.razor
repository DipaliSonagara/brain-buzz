@using BrainBuzz.web.Models.ViewModels
@using BrainBuzz.web.Services.Interface
@inject IQuizService QuizService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Available Quizzes</h3>

@if (quizzes == null)
{
    <p><em>Loading...</em></p>
}
else if (!quizzes.Any())
{
    <p><em>No quizzes available.</em></p>
}
else
{
    <div class="row">
        @foreach (var quiz in quizzes)
        {
            <div class="col-md-4 mb-3">
                <div class="quiz-card">
                    <div class="quiz-card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="quiz-card-title">@quiz.QuizName</h5>
                            <span class="badge @quiz.DifficultyBadgeClass">@quiz.Difficulty</span>
                        </div>
                        <p class="quiz-card-text">@quiz.Description</p>
                        <div class="quiz-card-meta mb-3">
                            <div class="d-flex align-items-center mb-1">
                                <i class="@quiz.CategoryIcon me-2"></i>
                                <span>@quiz.Category</span>
                            </div>
                            <div class="d-flex align-items-center mb-1">
                                <i class="fas fa-question-circle me-2"></i>
                                <span>@quiz.TotalQuestions Questions</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-clock me-2"></i>
                                <span>@quiz.TimeLimitDisplay</span>
                            </div>
                        </div>
                        <a href="/quiz/@quiz.QuizId" class="btn-dashboard primary w-100">
                            <i class="fas fa-play me-2"></i>Start Quiz
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<QuizViewModel>? quizzes;

    protected override async Task OnInitializedAsync()
    {
        quizzes = await QuizService.GetAllQuizzesAsync();
    }

    private async Task StartQuiz(int quizId)
    {
        try
        {
            await Task.Delay(100);
            Navigation.NavigateTo($"quiz/{quizId}");
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error starting quiz: {ex.Message}");
        }
    }
}