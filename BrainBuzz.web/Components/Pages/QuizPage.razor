@page "/quiz/{quizId:int}"
@using BrainBuzz.web.Data
@using BrainBuzz.web.Models.DbTable
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context
@inject NavigationManager Navigation

<h3>@quiz?.QuizName Quiz</h3>

@if (questions == null)
{
    <p><em>Loading questions...</em></p>
}
else
{
    <EditForm Model="@userAnswers" OnValidSubmit="SubmitQuiz">
        @for (int i = 0; i < questions.Count; i++)
        {
            var q = questions[i];
            <div class="question-card">
                <p><b>@(i + 1). @q.QuestionText</b></p>
                <InputRadioGroup @bind-Value="userAnswers[i]">
                    <InputRadio Value="A" /> @q.OptionA <br />
                    <InputRadio Value="B" /> @q.OptionB <br />
                    <InputRadio Value="C" /> @q.OptionC <br />
                    <InputRadio Value="D" /> @q.OptionD <br />
                </InputRadioGroup>
            </div>
        }

        <button type="submit">Submit</button>
    </EditForm>
}

@code {
    [Parameter] public int quizId { get; set; }
    private Quizzes quiz;
    private List<Questions> questions;
    private List<string> userAnswers;

    protected override async Task OnInitializedAsync()
    {
        quiz = await _context.Quizzes.FindAsync(quizId);
        questions = await _context.Questions.Where(q => q.QuizId == quizId).ToListAsync();
        userAnswers = new List<string>(new string[questions.Count]);
    }

    private void SubmitQuiz(EditContext context)
    {
        int score = 0;
        for (int i = 0; i < questions.Count; i++)
        {
            if (userAnswers[i] == questions[i].CorrectOption)
                score++;
        }

        Navigation.NavigateTo($"/result/{score}/{questions.Count}");
    }
}
