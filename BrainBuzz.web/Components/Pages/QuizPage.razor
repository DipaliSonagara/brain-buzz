@page "/quiz/{quizId:int}"
@using BrainBuzz.web.Data
@using BrainBuzz.web.Models.DbTable
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context
@inject NavigationManager Navigation



<div class="col-md-10 col-lg-10">
    <main class="dashboard-main">
        <div class="dashboard-content fade-in">
            <h3>@quiz?.QuizName Quiz</h3>
            @if (questions == null)
            {
                <p><em>Loading questions...</em></p>
            }
            else
            {
                <EditForm OnValidSubmit="SubmitQuiz" Model="questions">
                    @for (int i = 0; i < questions.Count; i++)
                    {
                        var q = questions[i];
                        int idx = i;
                        <div class="question-card">
                            <p><b>@(idx + 1). @q.QuestionText</b></p>

                            <InputRadioGroup @bind-Value="userAnswers[idx]">
                                <InputRadio Value="@("A")" /> @q.OptionA <br />
                                <InputRadio Value="@("B")" /> @q.OptionB <br />
                                <InputRadio Value="@("C")" /> @q.OptionC <br />
                                <InputRadio Value="@("D")" /> @q.OptionD <br />
                            </InputRadioGroup>
                        </div>
                    }

                <button type="submit">Submit</button>
            </EditForm>



            @code {
                [Parameter] public int quizId { get; set; }

                private Quizzes quiz;
                private List<Questions> questions = new();
                private List<string> userAnswers = new();

                protected override async Task OnInitializedAsync()
                {

                    quiz = await _context.Quizzes.FindAsync(quizId);
                    questions = await _context.Questions
                    .Where(q => q.QuizId == quizId)
                    .ToListAsync();


                    userAnswers = new List<string>(new string[questions.Count]);

                }


                private async Task SubmitQuiz()
                {
                    int score = 0;
                    for (int i = 0; i < questions.Count; i++)
                    {
                        var selected = userAnswers[i];
                        var correct = questions[i].CorrectOption;
                        if (!string.IsNullOrEmpty(selected) && selected == correct)
                        {
                            score++;
                        }
                    }


                    Console.WriteLine($"User scored: {score}");
                    await Task.CompletedTask;
                }
            }
                        }
        </div>
    </main>
</div>