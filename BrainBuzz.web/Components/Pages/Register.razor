@page "/register"
@layout BlankLayout
@using System.ComponentModel.DataAnnotations
@using BrainBuzz.web.Components.Layout

<div class="auth-container">
     <div class="auth-card">
          <div class="auth-header">
               <div class="auth-icon">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                    </svg>
               </div>
               <h1 class="auth-title">Create Account</h1>
               <p class="auth-subtitle">
                    Already have an account? <a href="/">Sign in here</a>
               </p>
          </div>

          <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
               <DataAnnotationsValidator />

               <div class="form-row">
                    <div class="form-group">
                         <label for="firstName">First Name</label>
                         <InputText @bind-Value="registerModel.FirstName" id="firstName"
                                    class="form-input" placeholder="John" />
                         <ValidationMessage For="@(() => registerModel.FirstName)" />
                    </div>

                    <div class="form-group">
                         <label for="lastName">Last Name</label>
                         <InputText @bind-Value="registerModel.LastName" id="lastName"
                                    class="form-input" placeholder="Doe" />
                         <ValidationMessage For="@(() => registerModel.LastName)" />
                    </div>
               </div>

               <div class="form-group">
                    <label for="email">Email Address</label>
                    <InputText @bind-Value="registerModel.Email" id="email" type="email"
                               class="form-input" placeholder="john@example.com" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
               </div>

               <div class="form-group">
                    <label for="password">Password</label>
                    <InputText @bind-Value="registerModel.Password" id="password" type="password"
                               class="form-input" placeholder="Create a strong password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
               </div>

               <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText @bind-Value="registerModel.ConfirmPassword" id="confirmPassword" type="password"
                               class="form-input" placeholder="Confirm your password" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
               </div>

               <div class="checkbox-group">
                    <InputCheckbox @bind-Value="registerModel.AcceptTerms" id="acceptTerms" class="checkbox-input" />
                    <label for="acceptTerms" class="checkbox-label">
                         I agree to the <a href="/terms">Terms of Service</a> and <a href="/privacy">Privacy Policy</a>
                    </label>
               </div>
               <ValidationMessage For="@(() => registerModel.AcceptTerms)" />

               <ValidationSummary class="validation-summary" />

               <button type="submit" disabled="@isLoading" class="btn btn-secondary">
                    @if (isLoading)
                    {
                         <div class="spinner"></div>
                    }
                    Create Account
               </button>
          </EditForm>
     </div>
</div>

@code {
     private RegisterModel registerModel = new();
     private bool isLoading = false;

     public class RegisterModel
     {
          [Required(ErrorMessage = "First name is required")]
          [StringLength(50, MinimumLength = 2, ErrorMessage = "First name must be between 2 and 50 characters")]
          public string FirstName { get; set; } = "";

          [Required(ErrorMessage = "Last name is required")]
          [StringLength(50, MinimumLength = 2, ErrorMessage = "Last name must be between 2 and 50 characters")]
          public string LastName { get; set; } = "";

          [Required(ErrorMessage = "Email is required")]
          [EmailAddress(ErrorMessage = "Please enter a valid email address")]
          public string Email { get; set; } = "";

          [Required(ErrorMessage = "Password is required")]
          [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
          [DataType(DataType.Password)]
          public string Password { get; set; } = "";

          [Required(ErrorMessage = "Please confirm your password")]
          [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
          [DataType(DataType.Password)]
          public string ConfirmPassword { get; set; } = "";

          [Required(ErrorMessage = "You must accept the terms and conditions")]
          [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms and conditions")]
          public bool AcceptTerms { get; set; }


     }


     private async Task HandleRegister()
     {
          isLoading = true;
          try
          {
               // Simulate API call
               await Task.Delay(2000);

               // Add your registration logic here
               // Example: await AuthService.RegisterAsync(registerModel);

               Console.WriteLine($"Registration attempt: {registerModel.Email}");

               // Redirect on success
               // NavigationManager.NavigateTo("/login");
          }
          catch (Exception ex)
          {
               Console.WriteLine($"Registration error: {ex.Message}");
          }
          finally
          {
               isLoading = false;
          }
     }
}