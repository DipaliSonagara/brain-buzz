@page "/results"
@using BrainBuzz.web.Services.Interface
@using BrainBuzz.web.Services
@using BrainBuzz.web.Models.ViewModels
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@layout MainLayout
@rendermode InteractiveServer
@inject IQuizService QuizService
@inject SessionService SessionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Results - BrainBuzz</PageTitle>

<!-- Results Content -->
<div class="space-y-6">
          <div class="mb-8">
               <h1 class="text-3xl font-bold text-gray-900 mb-2">Quiz Results</h1>
               <p class="text-gray-600">Track your learning progress and review your quiz performance.</p>
          </div>

          <div class="dashboard-content">
               <!-- Statistics Overview -->
               <section class="stats-overview">
                    <div class="stats-grid">
                         <div class="stat-item stat-success">
                              <div class="stat-icon">
                                   <i class="fas fa-check-circle"></i>
                              </div>
                              <div class="stat-info">
                                   <div class="stat-number">@totalQuizzes</div>
                                   <div class="stat-label">Total Quizzes</div>
                                   <div class="stat-description">Completed</div>
                              </div>
                         </div>

                         <div class="stat-item stat-success">
                              <div class="stat-icon">
                                   <i class="fas fa-chart-line"></i>
                              </div>
                              <div class="stat-info">
                                   <div class="stat-number">@averageScore%</div>
                                   <div class="stat-label">Average Score</div>
                                   <div class="stat-description">@(averageScore >= 80 ? "Excellent!" : averageScore >= 60 ? "Good job!" : "Keep improving!")</div>
                              </div>
                         </div>

                         <div class="stat-item stat-warning">
                              <div class="stat-icon">
                                   <i class="fas fa-trophy"></i>
                              </div>
                              <div class="stat-info">
                                   <div class="stat-number">@bestScore%</div>
                                   <div class="stat-label">Best Score</div>
                                   <div class="stat-description">Personal best</div>
                              </div>
                         </div>

                         <div class="stat-item stat-info">
                              <div class="stat-icon">
                                   <i class="fas fa-calendar-week"></i>
                              </div>
                              <div class="stat-info">
                                   <div class="stat-number">@weeklyQuizzes</div>
                                   <div class="stat-label">This Week</div>
                                   <div class="stat-description">Recent activity</div>
                              </div>
                         </div>
                    </div>
               </section>

               <!-- Filter and Search -->
               <div class="content-card mb-6">
                    <div class="dashboard-card-header">
                         <div class="header-content">
                              <div class="header-icon">
                                   <i class="fas fa-filter"></i>
                              </div>
                              <div class="header-text">
                                   <h3 class="header-title">Filter & Search</h3>
                                   <p class="header-subtitle">Find specific quiz results</p>
                              </div>
                         </div>
                    </div>
                    <div class="card-body">
                         <div class="flex flex-col md:flex-row gap-4">
                              <div class="flex-1">
                                   <input type="text"
                                          @bind="searchTerm"
                                          @oninput="FilterResults"
                                          placeholder="Search quiz results..."
                                          class="form-input" />
                              </div>
                              <div class="flex gap-2">
                                   <select @onchange="OnQuizFilterChanged" class="form-input">
                                        <option value="">All Quizzes</option>
                                        @if (availableQuizzes != null)
                                        {
                                             @foreach (var quiz in availableQuizzes)
                                             {
                                                  <option value="@quiz.QuizName" selected="@(selectedQuiz == quiz.QuizName)">@quiz.QuizName</option>
                                             }
                                        }
                                   </select>
                                   <select @onchange="OnSortChanged" class="form-input">
                                        <option value="date" selected="@(sortBy == "date")">Sort by Date</option>
                                        <option value="score" selected="@(sortBy == "score")">Sort by Score</option>
                                        <option value="time" selected="@(sortBy == "time")">Sort by Time</option>
                                   </select>
                              </div>
                         </div>
                    </div>
               </div>

               <!-- Results List -->
               @if (isLoading)
               {
                    <LoadingSkeleton Type="LoadingSkeleton.SkeletonType.Table" Rows="5" Columns="4" />
               }
               else if (!filteredResults.Any())
               {
                    <div class="modern-empty-state">
                         <div class="empty-icon">
                              <i class="fas fa-chart-bar"></i>
                         </div>
                         <h4>No Results Found</h4>
                         <p>@(allResults?.Any() == true ? "Try adjusting your search criteria." : "Complete your first quiz to see results here.")</p>
                         @if (allResults?.Any() != true)
                         {
                              <a href="/quizzes" class="empty-state-btn">
                                   <i class="fas fa-play"></i>
                                   <span>Browse Quizzes</span>
                              </a>
                         }
                         else
                         {
                              <button @onclick="ClearFilters" class="empty-state-btn">
                                   <i class="fas fa-times"></i>
                                   <span>Clear Filters</span>
                              </button>
                         }
                    </div>
               }
               else
               {
                    <div class="results-grid">
                         @foreach (var result in filteredResults)
                         {
                              <div class="result-card" @onclick="() => ShowResultDetails(result)">
                                    <div class="result-card-header">
                                         <div class="result-score-progress">
                                              <div class="result-progress-bar">
                                                   <div class="result-progress-fill @GetScoreColorClass(result.Percentage)" style="width: @result.Percentage%"></div>
                                                   <span class="result-percentage-text @(result.Percentage < 30 ? "low-score" : "") @(result.Percentage < 50 ? "text-dark" : "")">@result.Percentage.ToString("F0")%</span>
                                              </div>
                                         </div>
                                         <div class="result-grade-badge @GetGradeBadgeClass(result.Percentage)">
                                              @GetGrade(result.Percentage)
                                         </div>
                                    </div>
                                   
                                   <div class="result-card-content">
                                        <h3 class="result-quiz-name">@result.QuizName</h3>
                                        
                                        <div class="result-meta">
                                             <div class="meta-item">
                                                  <i class="fas fa-calendar-alt"></i>
                                                  <span>@result.CompletedAtDisplay</span>
                                                  <span class="meta-separator">â€¢</span>
                                                  <i class="fas fa-clock"></i>
                                                  <span>@result.TimeSpentDisplay</span>
                                             </div>
                                             <div class="meta-item">
                                                  <i class="fas fa-question-circle"></i>
                                                  <span>@result.Score/@result.TotalQuestions questions</span>
                                             </div>
                                        </div>
                                   </div>
                                   
                                   <div class="result-card-footer">
                                        <button class="view-details-btn">
                                             <i class="fas fa-eye"></i>
                                             <span>View Details</span>
                                        </button>
                                   </div>
                              </div>
                         }
                    </div>
               }
          </div>
     </div>

     <!-- Result Details Modal -->
     @if (showModal && selectedResult != null)
     {
          <div class="result-modal-overlay" @onclick="CloseModal">
               <div class="result-modal-content" @onclick:stopPropagation="true">
                    <div class="result-modal-header">
                         <div class="modal-title-section">
                              <h3 class="result-modal-title">@selectedResult.QuizName</h3>
                              <p class="result-modal-subtitle">Quiz Results</p>
                         </div>
                         <button @onclick="CloseModal" class="result-modal-close">
                              <i class="fas fa-times"></i>
                         </button>
                    </div>
                    
                    <div class="result-modal-body">
                         <!-- Score Display -->
                         <div class="score-display">
                              <div class="score-progress-container">
                                   <div class="score-progress-bar">
                                        <div class="score-progress-fill @GetScoreColorClass(selectedResult.Percentage)" style="width: @selectedResult.Percentage%"></div>
                                        <span class="score-percentage-text @(selectedResult.Percentage < 50 ? "text-dark" : "")">@selectedResult.Percentage.ToString("F0")%</span>
                                   </div>
                              </div>
                              <div class="score-info">
                                   <h4 class="grade-display">@GetGrade(selectedResult.Percentage)</h4>
                                   <p class="score-description">@selectedResult.Score out of @selectedResult.TotalQuestions questions correct</p>
                              </div>
                         </div>

                         <!-- Stats Grid -->
                         <div class="stats-grid">
                              <div class="stat-item">
                                   <div class="stat-icon">
                                        <i class="fas fa-clock"></i>
                                   </div>
                                   <div class="stat-content">
                                        <div class="stat-value">@selectedResult.TimeSpentDisplay</div>
                                        <div class="stat-label">Time Taken</div>
                                   </div>
                              </div>
                              
                              <div class="stat-item">
                                   <div class="stat-icon">
                                        <i class="fas fa-calendar-check"></i>
                                   </div>
                                   <div class="stat-content">
                                        <div class="stat-value">@selectedResult.CompletedAtDisplay</div>
                                        <div class="stat-label">Completed</div>
                                   </div>
                              </div>
                         </div>

                         <!-- Performance Breakdown -->
                         <div class="performance-breakdown">
                              <h5 class="breakdown-title">Performance Breakdown</h5>
                              <div class="breakdown-stats">
                                   <div class="breakdown-item">
                                        <span class="breakdown-label">Accuracy Rate</span>
                                        <span class="breakdown-value">@selectedResult.Percentage.ToString("F1")%</span>
                                   </div>
                                   <div class="breakdown-item">
                                        <span class="breakdown-label">Questions Answered</span>
                                        <span class="breakdown-value">@selectedResult.TotalQuestions</span>
                                   </div>
                                   <div class="breakdown-item correct">
                                        <span class="breakdown-label">Correct Answers</span>
                                        <span class="breakdown-value">@selectedResult.Score</span>
                                   </div>
                                   <div class="breakdown-item incorrect">
                                        <span class="breakdown-label">Incorrect Answers</span>
                                        <span class="breakdown-value">@(selectedResult.TotalQuestions - selectedResult.Score)</span>
                                   </div>
                              </div>
                         </div>
                    </div>
                    
                    <div class="result-modal-footer">
                         <button @onclick="CloseModal" class="btn-close-modal">Close</button>
                         <a href="/quiz/@selectedResult.QuizId" class="btn-retake-modal">
                              <i class="fas fa-redo"></i>
                              <span>Retake Quiz</span>
                         </a>
                    </div>
               </div>
          </div>
}

@code {
     private bool isLoading = true;
     private List<QuizResultViewModel> allResults = new();
     private List<QuizResultViewModel> filteredResults = new();
     private List<QuizViewModel> availableQuizzes = new();
     private string searchTerm = "";
     private string selectedQuiz = "";
     private string sortBy = "date";
     private bool showModal = false;
     private QuizResultViewModel? selectedResult;

     // Statistics
     private int totalQuizzes = 0;
     private int averageScore = 0;
     private int bestScore = 0;
     private int weeklyQuizzes = 0;

     protected override async Task OnInitializedAsync()
     {
          // Initialize with default values during prerendering
          isLoading = true;
          totalQuizzes = 0;
          averageScore = 0;
          weeklyQuizzes = 0;
     }

     protected override async Task OnAfterRenderAsync(bool firstRender)
     {
          if (firstRender)
          {
               await LoadResults();
          }
     }

     private async Task LoadResults()
     {
          await Task.Delay(500);
          
          try
          {
               var sessionId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "sessionId");
               string currentUser = "Demo User";
               if (!string.IsNullOrEmpty(sessionId))
               {
                    currentUser = SessionService.GetUsername(sessionId);
               }

               var results = await QuizService.GetUserQuizResultsAsync(currentUser);
               allResults = results?.ToList() ?? new List<QuizResultViewModel>();
               
               var quizzes = await QuizService.GetAllQuizzesAsync();
               availableQuizzes = quizzes?.ToList() ?? new List<QuizViewModel>();

               if (allResults.Any())
               {
                    totalQuizzes = allResults.Count;
                    averageScore = (int)allResults.Average(r => r.Percentage);
                    bestScore = (int)allResults.Max(r => r.Percentage);

                    var weekAgo = DateTime.Now.AddDays(-7);
                    weeklyQuizzes = allResults.Count(r => r.CompletedAt >= weekAgo);
               }

               FilterResults();
          }
          catch (Exception)
          {
               allResults = new List<QuizResultViewModel>();
               availableQuizzes = new List<QuizViewModel>();
               filteredResults = new List<QuizResultViewModel>();
          }
          finally
          {
               isLoading = false;
               StateHasChanged();
          }
     }

     private void FilterResults()
     {
          var filtered = allResults.Where(result =>
              (string.IsNullOrEmpty(searchTerm) ||
               result.QuizName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
              (string.IsNullOrEmpty(selectedQuiz) || result.QuizName == selectedQuiz)
          ).ToList();

          // Sort results
          filtered = sortBy switch
          {
               "score" => filtered.OrderByDescending(r => r.Percentage).ToList(),
               "time" => filtered.OrderBy(r => r.TimeSpent).ToList(),
               _ => filtered.OrderByDescending(r => r.CompletedAt).ToList()
          };

          filteredResults = filtered;
          StateHasChanged();
     }

     private void ClearFilters()
     {
          searchTerm = "";
          selectedQuiz = "";
          FilterResults();
     }

     private void OnQuizFilterChanged(ChangeEventArgs e)
     {
          selectedQuiz = e.Value?.ToString() ?? "";
          FilterResults();
     }

     private void OnSortChanged(ChangeEventArgs e)
     {
          sortBy = e.Value?.ToString() ?? "date";
          FilterResults();
     }

     private void ShowResultDetails(QuizResultViewModel result)
     {
          selectedResult = result;
          showModal = true;
     }

     private void CloseModal()
     {
          showModal = false;
          selectedResult = null;
     }

     private string GetScoreColorClass(double percentage)
     {
          return percentage switch
          {
               >= 90 => "bg-success",
               >= 80 => "bg-primary",
               >= 70 => "bg-warning",
               _ => "bg-error"
          };
     }

     private string GetGradeBadgeClass(double percentage)
     {
          return percentage switch
          {
               >= 90 => "badge-success",
               >= 80 => "badge-primary",
               >= 70 => "badge-warning",
               _ => "badge-error"
          };
     }

     private string GetGrade(double percentage)
     {
          return percentage switch
          {
               >= 90 => "A+",
               >= 80 => "A",
               >= 70 => "B",
               >= 60 => "C",
               >= 50 => "D",
               _ => "F"
          };
     }
}
